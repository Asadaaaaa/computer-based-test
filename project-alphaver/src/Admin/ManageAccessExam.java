package Admin;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aditya Syawal, Muhamad Talim, Mikail Asada, Rafi Fajrul
 */
public class ManageAccessExam extends javax.swing.JFrame {

//    private Connection connection;
    private java.sql.Connection connectionDB;
    private String userID;

    /**
     * Creates new form NewJFrame
     */
    public ManageAccessExam(String userID, String username, java.sql.Connection connectionDB) {
        this.connectionDB = connectionDB;
        this.initComponents();
        this.userID = userID;
        this.labelUser.setText(username);
        this.idLabel.setText(userID);
        this.initAlgos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        examAccessTable = new javax.swing.JTable();
        okButton = new javax.swing.JButton();
        labelUser = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        examAccessTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Exam ID", "Title", "Access"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        examAccessTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                examAccessTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(examAccessTable);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        labelUser.setText("User");

        idLabel.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(labelUser, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(233, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUser)
                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(okButton)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        ManageUser manageUser = new ManageUser(this.connectionDB);
        manageUser.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void examAccessTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_examAccessTableMouseClicked
        int row = examAccessTable.getSelectedRow();
        int column = examAccessTable.getSelectedColumn();
        if (column == 2) { // Assuming "Access" column is at index 2
            Boolean accessValue = (Boolean) examAccessTable.getValueAt(row, column);
            int examId = (Integer) examAccessTable.getValueAt(row, 0);
            updateAccessExam(examId, accessValue);

        }
    }//GEN-LAST:event_examAccessTableMouseClicked

    private void updateAccessExam(int examId, boolean accessValue) {
        try {
            if (accessValue) {
                String insertSql = "INSERT INTO exam_access (user_id, exam_id) VALUES (?, ?)";
                try (PreparedStatement insertStatement = this.connectionDB.prepareStatement(insertSql)) {
                    insertStatement.setString(1, userID);
                    insertStatement.setInt(2, examId);
                    insertStatement.executeUpdate();
                }
            } else {
                String deleteSql = "DELETE FROM exam_access WHERE exam_id = ? AND user_id = ?";
                try (PreparedStatement deleteStatement = this.connectionDB.prepareStatement(deleteSql)) {
                    deleteStatement.setInt(1, examId);
                    deleteStatement.setString(2, userID);
                    deleteStatement.executeUpdate();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadDataFromDatabase() {
        try {
            Statement statement = this.connectionDB.createStatement();
            String sql = "SELECT * FROM exam";
            ResultSet resultSet = statement.executeQuery(sql);

            DefaultTableModel tableModel = (DefaultTableModel) examAccessTable.getModel();
            tableModel.setRowCount(0);
            Integer tableCount = 1;
            String idUser = this.idLabel.getText();

            while (resultSet.next()) {
                Object[] rowData = {
                    resultSet.getInt("id"),
                    resultSet.getString("title"),
                    hasAccess(resultSet.getString("id"), idUser)
                };
                System.out.print(Arrays.toString(rowData));
                tableModel.addRow(rowData);
                tableCount++;
            }

            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            System.out.print(e);
            e.printStackTrace();
        }
    }

    private boolean hasAccess(String examId, String userId) {
        try (
                PreparedStatement statement = this.connectionDB.prepareStatement(
                        "SELECT COUNT(exam_id) as `count` FROM exam_access WHERE exam_id = ? AND user_id = ?")) {

            statement.setString(1, examId);
            statement.setString(2, userId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    int count = resultSet.getInt("count");
                    System.out.print(count);
                    return count > 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return false;
    }

    private void initAlgos() {
        this.okButton.setVisible(true);
        this.loadDataFromDatabase();
        this.userID = idLabel.getText();
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ManageAccessExam().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable examAccessTable;
    private javax.swing.JLabel idLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelUser;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
